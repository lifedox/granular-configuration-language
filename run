#!/usr/bin/env bash
set -e
# Use /usr/bin/env bash and set -e, so that a newer version of bash can be used on mac

_error_handler() {
    errorCode=$? # save the exit code as the first thing done in the trap function
    echo "Exiting early due to error $errorCode"
    echo "The command executing at the time of the error was"
    echo "\"$BASH_COMMAND\""
    echo "on line ${BASH_LINENO[0]}."
    # do some error handling, cleanup, logging, notification
    # $BASH_COMMAND contains the command that was being executed at the time of the trap
    # ${BASH_LINENO[0]} contains the line number in the script of that command
    # exit the script or return to try again, etc.
    exit $errorCode # or use some other value or do return instead
}

trap _error_handler ERR

# Set to directory of run script
dir="$(cd "$(dirname "$0")" && pwd)"
cd "$dir"

# Env Vars defaults
export ROOT_DIR=$dir
export G_CONFIG_LOCATION="$dir/configs/localdev.yaml"
export DOCKER_MAKE=${DOCKER_MAKE:-true}
export IN_DOCKER=${IN_DOCKER:-false}

usage=()

if [ -z "$CI_SERVER_URL" ]; then
    docker_vars="-it" # if not on server run with `-it`
    docker_compose_args="-f docker-compose.yml"
else
    # shellcheck disable=SC2034
    docker_vars=""
    docker_compose_args="-f docker-compose.yml"
fi

# Default Python Version
export PYTHON_VERSION=3.12

released_python_versions="3.13 3.12 3.11 3.10"         # Used by mypy
all_python_versions="${released_python_versions} 3.14" # Used for tests (maintains key order)
declare -A all_python_versions_lookup
all_python_versions_lookup["3.14"]="3.14-rc"
for version in $released_python_versions; do
    all_python_versions_lookup["${version}"]="${version}"
done

docker_service="build"
_run_docker_cmd() {
    echo "$@"
    build
    # shellcheck disable=SC2086
    docker compose ${docker_compose_args} run --service-ports --rm ${docker_service} "$@"
}

_run_cmd() {
    if [ "$DOCKER_MAKE" == 'true' ] && [ "$IN_DOCKER" != 'true' ]; then
        _run_docker_cmd "$@"
    else
        "$@"
    fi
}

_logit() {
    echo '--------------------------------------------------------------------------------'
    echo "$@"
    echo '--------------------------------------------------------------------------------'
}

################################################################################################
# Standard Run Commands
# From: https://granular.atlassian.net/wiki/spaces/GE/pages/1085112977/Backend+project+high-level+tooling
################################################################################################
usage+=("")
usage+=("Standard Commands:")
usage+=("  $0 tests - Run tests in docker using Python ${PYTHON_VERSION}")
tests() {
    _run_cmd poetry run ./run _tests "$@"
}
_tests() {
    mkdir -p results
    _logit 'Running tests'
    DD_TRACE_ENABLED=false pytest "$@"
}

for version in ${all_python_versions}; do
    usage+=("  $0 test${version:0:1}${version:2:2} (or $0 ${version:0:1}${version:2:2}) - Run tests in docker using Python ${version}")
done
test_version() {
    _run_cmd poetry run ./run _tests "$@"
}

usage+=("  $0 test_all - Run tests in docker on all supported Python Versions")
test_all() {
    test_many "${all_python_versions}" "$@"
}
usage+=("  $0 test_r - Run tests in docker on all supported released Python Versions")
test_r() {
    test_many "${released_python_versions}" "$@"
}
usage+=("  $0 test_many PYTHON_VERSIONS - Run tests in docker a list of Python Versions (e.g. \"3.11 3.12\"))")
test_many() {
    python_versions="${1}"
    shift

    is_first=TRUE

    for version in ${python_versions}; do
        if [[ "${is_first}" == "TRUE" ]]; then
            cov_arg=""
            is_first=FALSE
        else
            cov_arg="--cov-append"
        fi

        export PYTHON_VERSION="${all_python_versions_lookup["${version}"]}"
        test_version "${cov_arg}" "$@"
    done
}

usage+=("  $0 lint - Runs linting (isort, black, flake8, bandit) checks; non-zero exit status on failure")
lint() {
    _run_cmd ./run _lint
}
_lint() {
    _logit Running isort check
    poetry run isort --check .
    _logit Running black check
    poetry run black --check .
    _logit Running flake8
    poetry run flake8 .
    _logit Running bandit
    bandit -c pyproject.toml -r .
}

usage+=("  $0 mypy - Runs mypy checks using all Python version modes; non-zero exit status on failure")
mypy() {
    _run_cmd ./run _mypy
}
_mypy() {
    for version in $released_python_versions; do
        _logit Running mypy --python-version "${version}"
        poetry run mypy --python-version "${version}" .
    done
}

usage+=("  $0 mypy - Runs pyright checks using all Python version modes; non-zero exit status on failure")
pyright() {
    _run_cmd ./run _pyright
}
_pyright() {
    for version in $released_python_versions; do
        _logit Running pyright --pythonversion "${version}"
        poetry run pyright --pythonversion "${version}" .
    done
}

usage+=("  $0 refmt - Run black and isort")
refmt() {
    _run_cmd ./run _refmt
}
_refmt() {
    _logit Running isort
    poetry run isort .
    _logit Running black
    poetry run black .
}

usage+=("  $0 cleanup - Cleans up any auto-started project environment")
cleanup() {
    ./run _cleanup
}
_cleanup() {
    _logit Running cleanup
    rm -rf build results .serverless .venv .pytest_cache .mypy_cache atlas_svc_lambda.egg-info node_modules
    find . \
        \( \
        -iname "*.so" -or \
        -iname "*.pyc" -or \
        -iname "__pycache__" -or \
        -iname "*.egg*" \
        \) \
        -exec rm -rf {} \;
}

##################################################################################################
# Additional Run Commands
##################################################################################################
usage+=("")
usage+=("Repo Specific Commands")
usage+=("  $0 dev - Run poetry shell")
dev() {
    _run_cmd poetry shell
}

usage+=("  $0 lock - Run poetry lock")
lock() {
    poetry lock
}

usage+=("  $0 build - Build docker container")
build() {
    if [ "$DOCKER_MAKE" == 'true' ] && [ "$IN_DOCKER" != 'true' ]; then
        # shellcheck disable=SC2086
        docker compose ${docker_compose_args} build
    else
        echo "Already in the container"
    fi
}

usage+=("  $0 stop - Stop all docker containers")
stop() {
    _logit "stopping all docker containers"
    # shellcheck disable=SC2086
    docker compose ${docker_compose_args} down
}

usage+=("  $0 package - Build package")
package() {
    _run_cmd ./run _package "$@"
}
_package() {
    _logit Building package
    poetry build "$@"
}

usage+=("  $0 docs - Generates sphinx documentation site")
docs() {
    _run_cmd poetry run ./run _docs
}
_docs() {
    _logit 'Running _docs'
    sphinx-build \
        -M html . docs \
        --fail-on-warning
}
_docn() {
    clear
    rm -rf docs/

    _docs 3>&2 2>&1 1>&3-
}
# For Dark Reader to make local viewing bearable
_doch() {
    _docs
    pushd docs/html
    poetry run python -m http.server 9999
    popd
}
_dochn() {
    _docn
    pushd docs/html
    poetry run python -m http.server 9999
    popd
}

##################################################################################################
# poetry shortcuts
##################################################################################################

sync() {
    echo poetry sync --all-extras --all-groups
    poetry sync --all-extras --all-groups
}
install() {
    echo poetry install --all-extras --all-groups
    poetry install --all-extras --all-groups
}

cmd="$1"

# If there was a command, then shift so $@ is the args
# Don't need to shift if $@ is already just ""
if [[ "$cmd" != "" ]]; then shift; fi

echo_usage() {
    # shellcheck disable=SC2016
    echo 'NOTE: `./run` commands starting with "_" run locally. 
      All others run inside the docker container launched by calling `./run dev`'
    echo ""
    echo "Usage:  run COMMAND"
    echo ""
    echo "Entrypoint for all repository scripted actions."

    for line in "${usage[@]}"; do echo "$line"; done

    if [ -n "${cmd}" ]; then
        echo ""
        echo "Unknown COMMAND: ${cmd:-None}"
    fi

    exit 1
}

# No command
if [ -z "$cmd" ]; then
    echo_usage

# Special test_version commands (e.g test313)
elif [[ "$cmd" =~ ^(test)?[0-9]{3}$ ]]; then

    if [[ "$cmd" =~ ^test ]]; then
        version="${cmd:4:1}.${cmd:5:2}"
    else
        version="${cmd:0:1}.${cmd:1:2}"
    fi

    if [[ -n "${all_python_versions_lookup["${version}"]}" ]]; then
        export PYTHON_VERSION="${all_python_versions_lookup["${version}"]}"
        test_version "$@"
    else
        echo "${cmd}: Unsupported Python Version: ${version}"
    fi
# if command not found echo usage
elif ! declare -f "$cmd" >/dev/null; then
    echo_usage

else
    # uncomment me to debug ./run commands
    #set -o xtrace

    "$cmd" "$@"
fi
