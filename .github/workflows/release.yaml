name: Release

on:
  release:
    types: [published]

permissions: {}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - run: pipx install poetry
      - run: poetry run ./run _package

      - uses: actions/upload-artifact@v4
        with:
          name: distfiles
          path: dist/
          if-no-files-found: error

  upload-github:
    name: Upload (GitHub)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build
    steps:
      # We need to be in a git repo for gh to work.
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          name: distfiles
          path: dist/

      - run: gh release upload "${TAG_NAME}" dist/*.{tar.gz,whl}
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ github.event.release.tag_name }}

  upload-test-pypi:
    name: Upload (TestPyPI)
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/project/granular-configuration-language/
    permissions:
      id-token: write
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: distfiles
          path: dist/

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

  # upload-pypi:
  #   name: Upload (PyPI)
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/project/granular-configuration-language/
  #   permissions:
  #     id-token: write
  #   needs: build
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: distfiles
  #         path: dist/

  #     - uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         print-hash: true
